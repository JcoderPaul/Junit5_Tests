Источник: https://habr.com/ru/articles/349836/
          https://habr.com/ru/articles/350068/

****** Понимание принципа зависимости ******

*** Что такое зависимость? ***

Когда класс 'А' использует класс или интерфейс 'B', тогда 'А' зависит от 'B'.
'А' не может выполнить свою работу без 'B', и 'А' не может быть переиспользован
без переиспользования 'B'. В таком случае класс 'А' называют «зависимым», а
класс или интерфейс 'B' называют «зависимостью» см. рис. DOC/DI.jpg

Два класса, которые используют друг друга, называют связанными. Связанность между
классами может быть или слабой, или сильной, или чем-то средним. Степень связности
не бинарна и не дискретна, она находится в континууме. Сильная связанность ведет к
сильным зависимостям, и слабая связность ведет к слабым зависимостям или даже к
отсутствию зависимостей в некоторых ситуациях.

!!! Зависимости, или связи имеют направленность. То, что 'A' зависит от 'B' не значит,
что 'B' зависит от 'A' !!!

*** Почему зависимости это плохо? ***

Зависимости плохи тем, что снижают переиспользование. Снижение переиспользования плохо
по многим причинам. Обычно переиспользование оказывает позитивное влияние на скорость
разработки, качество кода, читаемость кода и т.д.

Как зависимости могут навредить, наиболее хорошо показывает пример: представьте, что у
Вас есть класс CalendarReader, который может читать события календаря из XML-файла.
Реализация CalendarReader приведена ниже:

******************************************************************************************
public class CalendarReader {
    public List readCalendarEvents(File calendarEventFile){
        //open InputStream from File and read calendar events.
    }
}
******************************************************************************************

Метод readCalendarEvents получает объект типа File в качестве параметра. Поэтому, этот метод
зависит от класса File. Зависимость от класса File означает, что CalendarReader способен на
чтение событий календаря ТОЛЬКО ИЗ ЛОКАЛЬНЫХ ФАЙЛОВ в файловой системе И НЕ МОЖЕТ читать
события календаря ИЗ СЕТЕВОГО СОЕДИНЕНИЯ, БД, или из ресурсов по classpath.

Можно сказать, что CalendarReader тесно связан c классом File и локальной файловой системой.

Менее связанной реализацией будет замена параметра типа File параметром типа InputStream, как
в коде ниже:

******************************************************************************************
public class CalendarReader {
    public List readCalendarEvents(InputStream calendarEventFile){
        //read calendar events from InputStream
    }
}
******************************************************************************************

И тут уже есть возможность получить объект InputStream из объекта типа File, из сетевого Socket,
класса URLConnection, объекта Class (Class.getResourceAsStream(String name)), из БД через JDBC и
т.п. И теперь CalendarReader больше не завязан на локальную файловую систему. Он может читать
файлы событий календаря из многих источников.

С версией метода readCalendarEvents(), использующей InputStream, класс CalendarReader повысил
возможности переиспользования. Тесная привязка к локальной файловой системе была удалена. Вместо
этого, она была заменена на зависимость от класса InputStream. Зависимость от InputStream более
гибка, чем зависимость от класса File, но это не означает, что CalendarReader на 100% может быть
переиспользован. Он все еще не может читать данные из канала NIO, например.

*** Типы зависимостей ***

Зависимости — это не просто «зависимости». Есть несколько типов зависимостей. Каждый из них ведет
к большей или меньшей гибкости в коде.

Типы зависимостей:
- зависимости классов;
- зависимости интерфейсов;
- зависимость метод/поле;

1. Зависимости классов — это зависимости от классов. Например, метод написанный ниже получает
   String как параметр. Таким образом, метод зависит от класса String.

******************************************************************************************
public byte[] readFileContents(String fileName){
    //open the file and return the contents as a byte array.
}
******************************************************************************************

2. Зависимости интерфейсов — это зависимости от интерфейсов. Например, метод описанный ниже
   получает CharSequence в качестве параметра. CharSequence — стандартный интерфейс Java
   (в пакете java.lang). Классы CharBuffer, String, StringBuffer и StringBuilder реализуют
   интерфейс CharSequence, поэтому экземпляры только этих классов могут быть использованы в
   качестве параметров этого метода.

******************************************************************************************
public byte[] readFileContents(CharSequence fileName){
    //open the file and return the contents as a byte array.
}
******************************************************************************************

3. Зависимости методов или полей — это зависимости от конкретных методов или полей объекта.
   Не важно, каков класс объекта или какой интерфейс он реализует, пока он имеет метод или
   поле требуемого типа. Следующий пример иллюстрирует зависимость методов.

   Метод readFileContents зависит от метода, названного «getFileName» в классе объекта,
   переданного как параметр (fileNameContainer).

   !!! Обратите внимание, что зависимость не видна из декларации метода !!!

******************************************************************************************
public byte[] readFileContents(Object fileNameContainer){

    Method method   = fileNameContainer
                          .getClass()
                          .getMethod("getFileName", null);

    String fileName = method.invoke(fileNameContainer, null);

    //open the file and return the contents as a byte array.
}
******************************************************************************************

Зависимости методов или переменных характерны для API, которые используют рефлексию. Например,
Butterfly Persistence использует рефлексию для того, чтобы обнаружить геттеры и сеттеры класса.
Без геттеров и сеттеров Butterfly Persistence не может читать и записывать объекты класса из/в
базу данных. Таким образом Butterfly Persistence зависит от геттеров и сеттеров.

Hibernate (схожий ORM API) может как использовать геттеры и сеттеры, так и поля напрямую, так и
через рефлексию. Таким образом, Hibernate также имеет зависимость либо от методов, либо от полей.

Зависимость методов или («функций») также может быть замечена в языках, поддерживающих указатели
на функции или указатели на методы, которые должны быть переданы в качестве аргументов. Например,
делегаты в C#.

*** Дополнительные характеристики зависимостей ***

Зависимости имеют и другие важные характеристики помимо типа. Зависимости могут быть зависимостями
времени компиляции, времени исполнения, видимые, скрытые, прямые, непрямые, контекстуальные и т.п.
Рассмотрим их:

*** Зависимости реализации интерфейса ***

Если класс 'A' зависит от интерфейса 'I', тогда 'A' не зависит от конкретной реализации 'I'. Но 'A'
зависит от какой-то реализации 'I'. 'A' не может выполнять свою работу без некоторой реализации 'I'.
Таким образом, когда класс зависит от интерфейса, этот класс также зависит от реализации интерфейса.

Чем больше методов есть в интерфейсе, тем меньше шансов, что разработчики будут предоставлять
собственные реализации, если у них этого не просят. Следовательно, чем больше методов есть в
интерфейсе, тем больше возможность того, что разработчики «застрянут» на стандартной реализации
этого интерфейса. Другими словами, чем более сложным и громоздким становится интерфейс, тем более
тесно он связывается со своей дефолтной имплементацией.

Из-за зависимостей реализации интерфейса, Вы не должны добавлять функциональность в интерфейс слепо.
Если функциональность может быть инкапсулирована в свой компонент, в свой отдельный интерфейс, нужно
делать это.

Ниже — пример того, что это выглядит. Код примера показывает узел дерева для иерархической древовидной
структуры.

******************************************************************************************
public interface ITreeNode {
    public void            addChild(ITreeNode node);
    public List<ITreeNode> getChildren();
    public ITreeNode       getParent();
}
******************************************************************************************

Представьте, что Вы хотите иметь возможность подсчитать количество потомков конкретного узла. Сначала
Вы можете поддаться искушению, и добавить метод countDescendents() в интерфейс ITreeNode. Тем не менее,
если Вы так сделаете, каждый, кто захочет реализовать интерфейс ITreeNode, вынужден будет реализовывать
и метод countDescendents().

Вместо этого Вы можете реализовать класс DescendentCounter, который может просматривать экземпляр
ITreeNode и считать всех потомков этого экземпляра. DescendentCounter может быть переиспользован с
другими реализациями интерфейса ITreeNode. Вы только что уберегли своих пользователей от проблемы
реализации метода countDescendents(), даже если им нужно реализовать интерфейс ITreeNode!

*** Зависимости времени компиляции и времени исполнения ***

- Зависимость, которая может быть разрешена во время компиляции,
  называется - зависимостью времени компиляции.

- Зависимость, которая не может быть разрешена до начала исполнения,
  называется — зависимость времени исполнения.

Зависимости времени компиляции могут быть проще замечены, чем зависимости времени выполнения, однако,
зависимости времени исполнения могут быть более гибкими.

Например, Butterfly Persistence, находит геттеры и сеттеры класса во время исполнения и автоматически
мапит их с таблицами БД. Это очень простой способ сопоставлять классы с таблицами БД. Тем не менее,
чтобы делать это, Butterfly Persistence зависит от правильно названных геттеров и сеттеров.

*** Видимые и скрытые зависимости ***

- Видимые зависимости — это зависимости, которые разработчики
  могут видеть из интерфейса класса.

- Скрытые зависимости - это зависимости, которые не могут быть
  обнаружены в интерфейсе класса.

В примере, приведенном ранее, зависимости String и CharSequence метода readFileContents() — видимые
зависимости. Они видимы в декларации метода, который является частью интерфейса класса.

Зависимости метода readFileContents(), который получает Object в качестве параметра, невидимы. Вы не
можете видеть из интерфейса, что метод readFileContents() вызывает fileNameContainer.toString(), чтобы
получить имя файла, или как на самом деле происходит, вызывает метод getFileName().

Другой пример скрытой зависимости — зависимость от статического синглтона или статических методов
внутри метода. Вы не можете видеть из интерфейса, что класс зависит от статического метода или
статического синглтона.

Как вы можете представить, скрытые зависимости могут быть злом. Их трудно обнаружить разработчику.
Их можно выявить только изучая код.

Это не то же самое, если говорить что не стоить никогда использовать скрытые зависимости. Скрытые
зависимости часто являются результатом предоставления разумных значений по умолчанию (providing
sensible defaults).

В этом примере это может не проблема:
******************************************************************************************
public class MyComponent{

  protected MyDependency dependency = null;

   public MyComponent(){
       this.dependency = new MyDefaultImpl();
       }

  public MyComponent(MyDependency dependency){
    this.dependency = dependency;
  }
}
******************************************************************************************

Однако, MyComponent имеет скрытую зависимость от MyDefaultImpl как можно видеть в конструкторе.
Но MyDefaultImpl не имеет опасных сайд-эффектов, поэтому в данном случае скрытая зависимость
не опасна.

*** Прямые и непрямые зависимости ***

Зависимость может быть либо прямой, либо непрямой. Если класс 'A' использует класс 'B', тогда класс
'A' имеет прямую зависимость от класса 'B'. Если 'A' зависит от 'B', 'B' зависит от 'C', тогда 'A'
имеет непрямую зависимость от 'C'.

Если вы не можете использовать 'A' без 'B', и не можете использовать 'B' без 'С', то вы не можете
также использовать 'A' без 'C'.

Непрямые зависимости также называют сцепленными (цепными), или транзитивными.
(см. «Better, Faster, Lighter Java» by Bruce A. Tate and Justin Gehtland).

*** Неоправданно обширные зависимости ***

Иногда компоненты зависят от большей информации, чем им нужно для работы. Например, представьте
компонент логина в веб-приложении. Этому компоненту нужны только логин и пароль, и он вернет объект
пользователя, если найдет такового.

Интерфейс может выглядеть так:

******************************************************************************************
public class LoginManager{

  public com.oldboy.DTO.User login(HttpServletRequest request){
    String user     = request.getParameter("user");
    String password = request.getParameter("password");

    //read user and return it.
  }
}
******************************************************************************************

Вызов компонента мог бы выглядеть так:

******************************************************************************************
LoginManager loginManager = new LoginManager();
com.oldboy.DTO.User         user         = loginManager.login(request);
******************************************************************************************

Выглядит просто, не так ли? И даже если методу логина потребуется больше параметров, не нужно
будет изменять вызывающий код.

Но сейчас метод логина имеет то, что я называю «неоправданно обширные зависимости» от интерфейса
HttpServletRequest. Метод зависит от большего, чем ему требуется для работы. LoginManager требует
только имя пользователя и пароль, чтобы найти пользователя, но получает HttpServletRequest как
параметр в методе логина.

В данном случае HttpServletRequest содержит гораздо больше информации, чем нужно LoginManager.
Зависимость от интерфейса HttpServletRequest вызывает две проблемы:

- LoginManager не может быть переиспользован без объекта HttpServletRequest. Это может сделать
  труднее юнит-тестирование LoginManager. Вам нужно будет замокать объект HttpServletRequest,
  что требует большой работы.

- LoginManager требует, чтобы названия параметров пользовательского имени и пароля были «логин»
  и «пароль». Это также необязательная зависимость.

Намного лучший интерфейс для метода логина LoginManager будет:

******************************************************************************************
public com.oldboy.DTO.User login(String user, String password){
    //read user and return it.
}
******************************************************************************************

И посмотрите, что случится с вызывающим кодом теперь:

******************************************************************************************
LoginManager loginManager = new LoginManager();
com.oldboy.DTO.User user = loginManager.login(
    request.getParameter("user"),
    request.getParameter("password"));
******************************************************************************************

Он стал более сложным. Вот причина, по которой разработчики создают неоправданно широкие
зависимости. Чтобы упростить вызывающий код.

*** Зависимости локальные и контекстные ***

При разработке приложений нормально разбивать приложения на компоненты. Некоторые из этих
компонентов — компоненты общего назначения, которые могут быть использованы также в других
приложениях. Другие компоненты специфичны для приложения и не будут использоваться за
пределами приложения.

Для компонентов общего назначения, любые классы, принадлежащие к компоненту (или API), являются
«локальными». Остальная часть приложения — это «контекст». Если компонент общего назначения
зависит от специфичных для приложения классов, это называется «контекстная зависимость».

Контекстные зависимости плохи тем, что делают невозможным использование компонента общего
назначения вне приложения. Заманчиво думать, что только плохой разработчик будет создавать
контекстные зависимости, но это не так. Контекстные зависимости обычно возникают, когда
разработчики стараются упростить создание своего приложения.

Хороший пример - это приложения, обрабатывающие запросы, такие как приложения, соединенные с
очередями сообщений или веб-приложения.

Представьте, что приложение, которое получает запрос в виде XML, обрабатывает запросы и получает
в ответ XML. В обработке XML-запроса участвуют несколько отдельных компонентов. Каждому из этих
компонентов нужна разная информация, некоторая информаця уже была обработана предыдущими компонентами.
Очень соблазнительно собрать XML-файл и всю связанную обработку внутри объекта запроса некоторого
вида, который отправляется всем компонентам, в последовательности обработки. Обрабатывающий компонент
может считать информацию из этого объекта запроса и добавить информацию от себя для компонентов,
стоящих далее в последовательности обработки. Принимая этот объект запроса как параметр, каждый из
компонентов, обрабатывающих запрос, зависит от этого запроса. Объект запроса специфичен для приложения,
это вызывает зависимость от контекста каждого компонента обработки запроса.

*** Стандартные vs кастомные зависимости класса/интерфейса ***

Во многих ситуациях для компонента лучше зависеть от класса или интерфейса из стандартных Java
(или C#) пакетов. Эти классы или интерфейсы всегда доступны каждому, что упрощает удовлетворение
этих зависимостей. Также эти классы с меньшей вероятностью могут измениться и вызвать падение
компиляции вашего приложения.

Однако, в некоторых ситуациях зависеть от стандартных библиотек — не лучшая вещь. Например, методу
нужно 4 строки для его конфигурации. Поэтому ваш метод принимает 4 строки как параметры. Например,
это имя драйвера, url базы данных, имя пользователя и пароль для подключения к базе данных. Если
все эти строки всегда используются вместе, для пользователя этого метода может быть понятнее, если
вы сгруппируете эти 4 строки в класс и будете передавать его экземпляр, вместо 4 строк.